package jlib;
  /**
    * this file is automatically generated by the jscheme->javac compiler Compiler.scm. 
    * Modify at your own risk!
    */
  import jsint.*;
  import java.lang.reflect.*;
  import java.util.*;
  
  
  public class SNLP extends jsint.Procedure implements jsint.Function,  Runnable {  
      public int whichcode=0;  // corresponds to a numbering of the toplevel procedures of the program
      public int whichtype=0;  // 0 = user defined procedure, 1 = java literal
      public static final int USER_DEF=0, JAVA_LIT=1;
      public Pair frame;
      public DynamicEnvironment dynEnv;

      public SNLP() {
          super();
          dynEnv=Scheme.getInteractionEnvironment();
      }
      public SNLP(int t, int n, Pair f) {
          whichtype = t;
          whichcode = n;
          frame = f;
          dynEnv = Scheme.getInteractionEnvironment();
      }
      public SNLP(int t, int n, Pair f, DynamicEnvironment d) {
          whichtype = t;
          whichcode = n;
          frame = f;
          dynEnv = d;
      }
  
      private Boolean addImport(String s) {
         jsint.Import.addImport(s);
         return Boolean.TRUE;
      }
  
      public void run() {
        this.invoke(null);
      } 
  
      public Object[] makeArgArray(jsint.Pair args) {
         return new Object[]{args};
      }

      public Object apply(Object[] args) {
      return invoke((Pair)args[0]);
      }
  
      public Object apply(Pair args) {
        return invoke(args);
      }
  
      public Object invoke(Pair args)
      {
        return LCO.eval(invoke1(args));
      }
  
    static Object tmp;
  
  
    public static void load() { 
      new SNLP().init();
    }

    public static void load(String shellArgs[]) {
       Scheme.getInteractionEnvironment().setValue(Symbol.intern("shellArgs"), shellArgs);
       load();
    }

    public static void main(String shellArgs[]) {
       Symbol main = jsint.Symbol.intern("main");
       load(shellArgs);
       if (main.isDefined())
          {
             DynamicEnvironment dynEnv = Scheme.getInteractionEnvironment();
             ((jsint.Procedure) (dynEnv.getValue(main))).apply(new Pair(shellArgs,Pair.EMPTY));
          }
     }

      public Object invoke1(Pair args) {
      if (whichtype == USER_DEF) {
       switch (whichcode) {
          case 0: return(_L0(args)); 
          case 1: return(_L1(args)); 
          case 2: return(_L2(args)); 
          case 3: return(_L3(args)); 
          case 4: return(_L4(args)); 
          case 5: return(_L5(args)); 
          case 6: return(_L6(args)); 
          case 7: return(_L7(args)); 
          case 8: return(_L8(args)); 
          case 9: return(_L9(args)); 
          case 10: return(_L10(args)); 
          case 11: return(_L11(args)); 
          case 12: return(_L12(args)); 
          case 13: return(_L13(args)); 
          case 14: return(_L14(args)); 
          case 15: return(_L15(args)); 
          case 16: return(_L16(args)); 
          case 17: return(_L17(args)); 
          case 18: return(_L18(args)); 
          case 19: return(_L19(args)); 
          case 20: return(_L20(args)); 

         default:  break;
       }}
      else {
       switch (whichcode) {
          case 0: return(_J0(args)); 
          case 1: return(_J1(args)); 
          case 2: return(_J2(args)); 
          case 3: return(_J3(args)); 
          case 4: return(_J4(args)); 
          case 5: return(_J5(args)); 
          case 6: return(_J6(args)); 
          case 7: return(_J7(args)); 
          case 8: return(_J8(args)); 
          case 9: return(_J9(args)); 
          case 10: return(_J10(args)); 
          case 11: return(_J11(args)); 
          case 12: return(_J12(args)); 
          case 13: return(_J13(args)); 
          case 14: return(_J14(args)); 

         default:  break;
       }}



      return null;
      }


  
   public void init() {
     Pair Args = null;
     dynEnv.setValue(Symbol.intern("this"), this);
     Class _p = Primitive.class; // this loads the primitives
dynEnv.setValue(Symbol.intern("html_unquote"), new SNLP(USER_DEF, 9, new Pair( Args, this.frame), dynEnv));

dynEnv.setValue(Symbol.intern("my-map"), new SNLP(USER_DEF, 11, new Pair( Args, this.frame), dynEnv));

dynEnv.setValue(Symbol.intern("main"), new SNLP(USER_DEF, 13, new Pair( Args, this.frame), dynEnv));

dynEnv.setValue(Symbol.intern("string->expr"), new SNLP(USER_DEF, 14, new Pair( Args, this.frame), dynEnv));

dynEnv.setValue(Symbol.intern("addquitaction"), new SNLP(USER_DEF, 18, new Pair( Args, this.frame), dynEnv));

dynEnv.setValue(Symbol.intern("snlpwin"), ((jsint.Procedure) new SNLP(USER_DEF, 19, new Pair( Args, this.frame), dynEnv)).apply(new Pair(((jsint.Procedure) _J14/* java.awt.Frame. */).apply(new Pair(_C16,
    Pair.EMPTY)),
    Pair.EMPTY)));

dynEnv.setValue(Symbol.intern("string->exprlist"), new SNLP(USER_DEF, 20, new Pair( Args, this.frame), dynEnv));

  
   }

 // definitions of global variables 
public static final Object html_95_unquote = Symbol.intern("html_unquote");

public static final Object main = Symbol.intern("main");

public static final Object string_45__62_expr = Symbol.intern("string->expr");

public static final Object addquitaction = Symbol.intern("addquitaction");


 // definitions of Scheme variables defined externally
   static Object not= Symbol.intern("not");

   static Object equal_63_= Symbol.intern("equal?");

   static Object list= Symbol.intern("list");

   static Object cons= Symbol.intern("cons");

   static Object member= Symbol.intern("member");

   static Object apply= Symbol.intern("apply");

   static Object string_45_append= Symbol.intern("string-append");

   static Object null_63_= Symbol.intern("null?");

   static Object my_45_map= Symbol.intern("my-map");

   static Object rest= Symbol.intern("rest");

   static Object first= Symbol.intern("first");

   static Object snlpwin= Symbol.intern("snlpwin");

   static Object eval= Symbol.intern("eval");

   static Object string_45__62_exprlist= Symbol.intern("string->exprlist");

   static Object array_45__62_list= Symbol.intern("array->list");


 // definitions of quoted terms 
   static Object _C0="&;";

   static Object _C1=Boolean.TRUE;

   static Object _C2="&";

   static Object _C3=";";

   static Object _C4=Boolean.FALSE;

   static Object _C5=new Pair("amp",Pair.EMPTY);

   static Object _C6=new Pair("lt",Pair.EMPTY);

   static Object _C7="<";

   static Object _C8=new Pair("gt",Pair.EMPTY);

   static Object _C9=">";

   static Object _C10=new Pair("quot",Pair.EMPTY);

   static Object _C11="\"";

   static Object _C12=Pair.EMPTY;

   static Object _C13=null;

   static Object _C14=new   Integer(0);

   static Object _C15="Closing this window will shutdown the snlp application";

   static Object _C16="snlp monitor";


 // definitions of embedded lambdas 
 Object _L0(Pair Args){
   Object tmp=null; 
 tmp = new LCO(dynEnv.getValue((Symbol)cons),new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(1 ))).getEltNover2(3))).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(3)),
    new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(5)),
    new Pair((( Pair) Args).getEltNover2(1),
    new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY))))),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L1(Pair Args){
   Object tmp=null; 
 tmp = new LCO(dynEnv.getValue((Symbol)cons),new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(1)),
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(2 ))).getEltNover2(3))).apply(new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(3)),
    new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(5)),
    new Pair((( Pair) Args).getEltNover2(1),
    new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(7)),
    Pair.EMPTY))))),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L2(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)member)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C5,
    Pair.EMPTY))))
  ?
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)member)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C6,
    Pair.EMPTY))))
  ?
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)member)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C8,
    Pair.EMPTY))))
  ?
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)member)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C10,
    Pair.EMPTY))))
  ?
  
  (Boolean.FALSE.equals(_C1)
  ?
  _C12
  :
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(((jsint.Procedure) _J1/* .hasMoreTokens */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 1, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) _J2/* .nextToken */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  new LCO(dynEnv.getValue((Symbol)list),new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(3)),
    new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(5)),
    Pair.EMPTY))))
  )
  )
  :
  new LCO(dynEnv.getValue((Symbol)cons),new Pair(_C11,
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(1 ))).getEltNover2(5))).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  )
  :
  new LCO(dynEnv.getValue((Symbol)cons),new Pair(_C9,
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(1 ))).getEltNover2(5))).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  )
  :
  new LCO(dynEnv.getValue((Symbol)cons),new Pair(_C7,
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(1 ))).getEltNover2(5))).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  )
  :
  new LCO(dynEnv.getValue((Symbol)cons),new Pair(_C2,
    new Pair(((jsint.Procedure) (((Pair) ((this.frame).nth(1 ))).getEltNover2(5))).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(7)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  );


   return tmp; 
}

 Object _L3(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C2,
    Pair.EMPTY))))
  ?
  _C4
  :
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair((( Pair) Args).getEltNover2(5),
    new Pair(_C3,
    Pair.EMPTY))))
  ?
  _C4
  :
  _C1
  )
  ),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 2, new Pair( Args, this.frame), dynEnv),new Pair((( Pair) Args).getEltNover2(3),
    Pair.EMPTY))
  :
  
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(((jsint.Procedure) _J1/* .hasMoreTokens */).apply(new Pair((( Pair) Args).getEltNover2(7),
    Pair.EMPTY)),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 0, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) _J2/* .nextToken */).apply(new Pair((( Pair) Args).getEltNover2(7),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  new LCO(dynEnv.getValue((Symbol)list),new Pair((( Pair) Args).getEltNover2(1),
    new Pair((( Pair) Args).getEltNover2(3),
    new Pair((( Pair) Args).getEltNover2(5),
    Pair.EMPTY))))
  )
  );


   return tmp; 
}

 Object _L4(Pair Args){
   Object tmp=null; 
 tmp = new LCO((((Pair) ((this.frame).nth(3 ))).getEltNover2(3)),new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(1)),
    new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair((( Pair) Args).getEltNover2(1),
    new Pair((((Pair) ((this.frame).nth(2 ))).getEltNover2(1)),
    Pair.EMPTY)))));


   return tmp; 
}

 Object _L5(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(((jsint.Procedure) _J1/* .hasMoreTokens */).apply(new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(1)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 4, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) _J2/* .nextToken */).apply(new Pair((((Pair) ((this.frame).nth(1 ))).getEltNover2(1)),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  new LCO(dynEnv.getValue((Symbol)list),new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)))
  );


   return tmp; 
}

 Object _L6(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(((jsint.Procedure) _J1/* .hasMoreTokens */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    Pair.EMPTY)),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 5, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) _J2/* .nextToken */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  new LCO(dynEnv.getValue((Symbol)list),new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY))
  );


   return tmp; 
}

 Object _L7(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)not)).apply(new Pair(((jsint.Procedure) _J1/* .hasMoreTokens */).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 6, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) _J2/* .nextToken */).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  _C12
  );


   return tmp; 
}

 Object _L8(Pair Args){
   Object tmp=null; 
 tmp = (( Pair) Args).setEltNover2(1,((jsint.Procedure) _J0/* java.util.StringTokenizer. */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair(_C0,
    new Pair(_C1,
    Pair.EMPTY)))));

tmp = (( Pair) Args).setEltNover2(3,new SNLP(USER_DEF, 3, new Pair( Args, this.frame), dynEnv));

tmp = (( Pair) Args).setEltNover2(5,new SNLP(USER_DEF, 7, new Pair( Args, this.frame), dynEnv));

tmp = new LCO(dynEnv.getValue((Symbol)apply),new Pair(dynEnv.getValue((Symbol)string_45_append),
    new Pair(((jsint.Procedure) (( Pair) Args).getEltNover2(5)).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L9(Pair Args){
   Object tmp=null; 
 tmp = new LCO(new SNLP(USER_DEF, 8, new Pair( Args, this.frame), dynEnv),new Pair(_C4,
    new Pair(_C4,
    new Pair(_C4,
    Pair.EMPTY))));


   return tmp; 
}

 Object _L10(Pair Args){
   Object tmp=null; 
 tmp = new LCO(dynEnv.getValue((Symbol)cons),new Pair((( Pair) Args).getEltNover2(1),
    new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)my_45_map)).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)rest)).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(3)),
    Pair.EMPTY)),
    Pair.EMPTY))),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L11(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)null_63_)).apply(new Pair((( Pair) Args).getEltNover2(3),
    Pair.EMPTY)))
  ?
  new LCO(new SNLP(USER_DEF, 10, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) (( Pair) Args).getEltNover2(1)).apply(new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)first)).apply(new Pair((( Pair) Args).getEltNover2(3),
    Pair.EMPTY)),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  _C12
  );


   return tmp; 
}

 Object _L12(Pair Args){
   Object tmp=null; 
 tmp = new LCO(dynEnv.getValue((Symbol)my_45_map),new Pair(dynEnv.getValue((Symbol)eval),
    new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)string_45__62_exprlist)).apply(new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)html_95_unquote)).apply(new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)first)).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY)),
    Pair.EMPTY)),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L13(Pair Args){
   Object tmp=null; 
 tmp = ((jsint.Procedure) _J3/* .pack */).apply(new Pair(dynEnv.getValue((Symbol)snlpwin),
    Pair.EMPTY));

tmp = ((jsint.Procedure) _J4/* .show */).apply(new Pair(dynEnv.getValue((Symbol)snlpwin),
    Pair.EMPTY));

tmp = new LCO(new SNLP(USER_DEF, 12, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)array_45__62_list)).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY));


   return tmp; 
}

 Object _L14(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C13,
    Pair.EMPTY))))
  ?
  new LCO(dynEnv.getValue((Symbol)first),new Pair(((jsint.Procedure) _J5/* jscheme.REPL.parseScheme */).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    Pair.EMPTY))
  :
  _C13
  );


   return tmp; 
}

 Object _L15(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals((( Pair) Args).getEltNover2(1))
  ?
  _C4
  :
  (( Pair) Args).getEltNover2(1)
  );


   return tmp; 
}

 Object _L16(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals((( Pair) Args).getEltNover2(1))
  ?
  new LCO(new SNLP(USER_DEF, 15, new Pair( Args, this.frame), dynEnv),new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair(((jsint.Procedure) _J8/* .getID */).apply(new Pair((((Pair) ((this.frame).nth(0 ))).getEltNover2(1)),
    Pair.EMPTY)),
    new Pair((((jsint.Procedure)_J9/* java.awt.event.WindowEvent.WINDOW_CLOSED$ */).apply(jsint.Pair.EMPTY)),
    Pair.EMPTY))),
    Pair.EMPTY))
  :
  (( Pair) Args).getEltNover2(1)
  );


   return tmp; 
}

 Object _L17(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) new SNLP(USER_DEF, 16, new Pair( Args, this.frame), dynEnv)).apply(new Pair(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair(((jsint.Procedure) _J8/* .getID */).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY)),
    new Pair((((jsint.Procedure)_J10/* java.awt.event.WindowEvent.WINDOW_CLOSING$ */).apply(jsint.Pair.EMPTY)),
    Pair.EMPTY))),
    Pair.EMPTY)))
  ?
  _C1
  :
  new LCO(_J11/* java.lang.System.exit */,new Pair(_C14,
    Pair.EMPTY))
  );


   return tmp; 
}

 Object _L18(Pair Args){
   Object tmp=null; 
 tmp = new LCO(_J6/* .addWindowListener */,new Pair((( Pair) Args).getEltNover2(1),
    new Pair(((jsint.Procedure) _J7/* jsint.Listener. */).apply(new Pair(new SNLP(USER_DEF, 17, new Pair( Args, this.frame), dynEnv),
    Pair.EMPTY)),
    Pair.EMPTY)));


   return tmp; 
}

 Object _L19(Pair Args){
   Object tmp=null; 
 tmp = ((jsint.Procedure) _J12/* .add */).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(((jsint.Procedure) _J13/* java.awt.Label. */).apply(new Pair(_C15,
    Pair.EMPTY)),
    Pair.EMPTY)));

tmp = ((jsint.Procedure) dynEnv.getValue((Symbol)addquitaction)).apply(new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY));

tmp = (( Pair) Args).getEltNover2(1);


   return tmp; 
}

 Object _L20(Pair Args){
   Object tmp=null; 
 tmp = 
  (Boolean.FALSE.equals(((jsint.Procedure) dynEnv.getValue((Symbol)equal_63_)).apply(new Pair((( Pair) Args).getEltNover2(1),
    new Pair(_C13,
    Pair.EMPTY))))
  ?
  new LCO(_J5/* jscheme.REPL.parseScheme */,new Pair((( Pair) Args).getEltNover2(1),
    Pair.EMPTY))
  :
  _C13
  );


   return tmp; 
}


 // definitions of java literals

static boolean [][] _moreApplicable__J0/* java.util.StringTokenizer. */ = new boolean[][]{ 
{true,false,false},
{false,true,false},
{false,false,true}

};

public static java.util.StringTokenizer _J0/* java.util.StringTokenizer. */(Pair args){
int numargs = args.length();
java.util.StringTokenizer 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 2)
        &&
       ((b== -1) || (_moreApplicable__J0/* java.util.StringTokenizer. */[ 0][b]))
        &&
       ((args.nth(0) instanceof java.lang.String) &&
        (args.nth(1) instanceof java.lang.String))) 
       { b = 0;}
   
    if ((numargs== 3)
        &&
       ((b== -1) || (_moreApplicable__J0/* java.util.StringTokenizer. */[ 1][b]))
        &&
       ((args.nth(0) instanceof java.lang.String) &&
        (args.nth(1) instanceof java.lang.String) &&
        (args.nth(2) instanceof java.lang.Boolean))) 
       { b = 1;}
   
    if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J0/* java.util.StringTokenizer. */[ 2][b]))
        &&
       ((args.nth(0) instanceof java.lang.String))) 
       { b = 2;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: return new java.util.StringTokenizer(
            (java.lang.String) args.nth(0),
            (java.lang.String) args.nth(1) ); 
    case 1: return new java.util.StringTokenizer(
            (java.lang.String) args.nth(0),
            (java.lang.String) args.nth(1),
            (((Boolean) (args.nth(2))).booleanValue()) ); 
    case 2: return new java.util.StringTokenizer(
            (java.lang.String) args.nth(0) ); 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J0/* java.util.StringTokenizer. */ = new SNLP( JAVA_LIT, 0/* java.util.StringTokenizer.*/, Pair.EMPTY);

public static Object _J1/* .hasMoreTokens */(Pair Args){
  return (((jsint.Procedure)_J1/* .hasMoreTokens */).apply(Args));}
static Object _J1/* .hasMoreTokens */ = new JavaMethod("hasMoreTokens", null, false);

public static Object _J2/* .nextToken */(Pair Args){
  return (((jsint.Procedure)_J2/* .nextToken */).apply(Args));}
static Object _J2/* .nextToken */ = new JavaMethod("nextToken", null, false);

public static Object _J3/* .pack */(Pair Args){
  return (((jsint.Procedure)_J3/* .pack */).apply(Args));}
static Object _J3/* .pack */ = new JavaMethod("pack", null, false);

public static Object _J4/* .show */(Pair Args){
  return (((jsint.Procedure)_J4/* .show */).apply(Args));}
static Object _J4/* .show */ = new JavaMethod("show", null, false);


static boolean [][] _moreApplicable__J5/* jscheme.REPL.parseScheme */ = new boolean[][]{ 
{true}

};

public static Object _J5/* jscheme.REPL.parseScheme */(Pair args){
int numargs = args.length();
Object 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J5/* jscheme.REPL.parseScheme */[ 0][b]))
        &&
       ((args.nth(0) instanceof java.lang.String))) 
       { b = 0;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: return jscheme.REPL.parseScheme(
            (java.lang.String) args.nth(0) ); 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J5/* jscheme.REPL.parseScheme */ = new SNLP( JAVA_LIT, 5/* jscheme.REPL.parseScheme*/, Pair.EMPTY);

public static Object _J6/* .addWindowListener */(Pair Args){
  return (((jsint.Procedure)_J6/* .addWindowListener */).apply(Args));}
static Object _J6/* .addWindowListener */ = new JavaMethod("addWindowListener", null, false);


static boolean [][] _moreApplicable__J7/* jsint.Listener. */ = new boolean[][]{ 
{true}

};

public static jsint.Listener _J7/* jsint.Listener. */(Pair args){
int numargs = args.length();
jsint.Listener 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J7/* jsint.Listener. */[ 0][b]))
        &&
       ((args.nth(0) instanceof jsint.Procedure))) 
       { b = 0;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: return new jsint.Listener(
            (jsint.Procedure) args.nth(0) ); 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J7/* jsint.Listener. */ = new SNLP( JAVA_LIT, 7/* jsint.Listener.*/, Pair.EMPTY);

public static Object _J8/* .getID */(Pair Args){
  return (((jsint.Procedure)_J8/* .getID */).apply(Args));}
static Object _J8/* .getID */ = new JavaMethod("getID", null, false);

public static java.lang.Integer _J9/* java.awt.event.WindowEvent.WINDOW_CLOSED$ */( Pair Args ){
                  if (Args.length() == 0) return new java.lang.Integer( java.awt.event.WindowEvent.WINDOW_CLOSED);

                  else {System.out.println("too many args in call to static field" + "java.awt.event.WindowEvent.WINDOW_CLOSED");
                        return null;} }


static Object _J9/* java.awt.event.WindowEvent.WINDOW_CLOSED$ */ = new SNLP( JAVA_LIT, 9/* java.awt.event.WindowEvent.WINDOW_CLOSED$*/, Pair.EMPTY);

public static java.lang.Integer _J10/* java.awt.event.WindowEvent.WINDOW_CLOSING$ */( Pair Args ){
                  if (Args.length() == 0) return new java.lang.Integer( java.awt.event.WindowEvent.WINDOW_CLOSING);

                  else {System.out.println("too many args in call to static field" + "java.awt.event.WindowEvent.WINDOW_CLOSING");
                        return null;} }


static Object _J10/* java.awt.event.WindowEvent.WINDOW_CLOSING$ */ = new SNLP( JAVA_LIT, 10/* java.awt.event.WindowEvent.WINDOW_CLOSING$*/, Pair.EMPTY);


static boolean [][] _moreApplicable__J11/* java.lang.System.exit */ = new boolean[][]{ 
{true}

};

public static Object _J11/* java.lang.System.exit */(Pair args){
int numargs = args.length();
Object 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J11/* java.lang.System.exit */[ 0][b]))
        &&
       ((args.nth(0) instanceof java.lang.Integer))) 
       { b = 0;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: java.lang.System.exit(
            (((Integer) (args.nth(0))).intValue()) ); break; 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J11/* java.lang.System.exit */ = new SNLP( JAVA_LIT, 11/* java.lang.System.exit*/, Pair.EMPTY);

public static Object _J12/* .add */(Pair Args){
  return (((jsint.Procedure)_J12/* .add */).apply(Args));}
static Object _J12/* .add */ = new JavaMethod("add", null, false);


static boolean [][] _moreApplicable__J13/* java.awt.Label. */ = new boolean[][]{ 
{true,false,false},
{false,true,false},
{false,false,true}

};

public static java.awt.Label _J13/* java.awt.Label. */(Pair args){
int numargs = args.length();
java.awt.Label 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 2)
        &&
       ((b== -1) || (_moreApplicable__J13/* java.awt.Label. */[ 0][b]))
        &&
       ((args.nth(0) instanceof java.lang.String) &&
        (args.nth(1) instanceof java.lang.Integer))) 
       { b = 0;}
   
    if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J13/* java.awt.Label. */[ 1][b]))
        &&
       ((args.nth(0) instanceof java.lang.String))) 
       { b = 1;}
   
    if ((numargs== 0)
        &&
       ((b== -1) || (_moreApplicable__J13/* java.awt.Label. */[ 2][b]))
        &&
       (true)) 
       { b = 2;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: return new java.awt.Label(
            (java.lang.String) args.nth(0),
            (((Integer) (args.nth(1))).intValue()) ); 
    case 1: return new java.awt.Label(
            (java.lang.String) args.nth(0) ); 
    case 2: return new java.awt.Label(); 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J13/* java.awt.Label. */ = new SNLP( JAVA_LIT, 13/* java.awt.Label.*/, Pair.EMPTY);


static boolean [][] _moreApplicable__J14/* java.awt.Frame. */ = new boolean[][]{ 
{true,false,false,false},
{false,true,false,false},
{false,false,true,false},
{false,false,false,true}

};

public static java.awt.Frame _J14/* java.awt.Frame. */(Pair args){
int numargs = args.length();
java.awt.Frame 
    tmp=null;  // return type, for methods
    int b= -1; // index of best matching method/constructor

if ((numargs== 2)
        &&
       ((b== -1) || (_moreApplicable__J14/* java.awt.Frame. */[ 0][b]))
        &&
       ((args.nth(0) instanceof java.lang.String) &&
        (args.nth(1) instanceof java.awt.GraphicsConfiguration))) 
       { b = 0;}
   
    if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J14/* java.awt.Frame. */[ 1][b]))
        &&
       ((args.nth(0) instanceof java.lang.String))) 
       { b = 1;}
   
    if ((numargs== 1)
        &&
       ((b== -1) || (_moreApplicable__J14/* java.awt.Frame. */[ 2][b]))
        &&
       ((args.nth(0) instanceof java.awt.GraphicsConfiguration))) 
       { b = 2;}
   
    if ((numargs== 0)
        &&
       ((b== -1) || (_moreApplicable__J14/* java.awt.Frame. */[ 3][b]))
        &&
       (true)) 
       { b = 3;}
   
    
try {
switch (b) {  
   // jump to the best matching method/constructor
    case 0: return new java.awt.Frame(
            (java.lang.String) args.nth(0),
            (java.awt.GraphicsConfiguration) args.nth(1) ); 
    case 1: return new java.awt.Frame(
            (java.lang.String) args.nth(0) ); 
    case 2: return new java.awt.Frame(
            (java.awt.GraphicsConfiguration) args.nth(0) ); 
    case 3: return new java.awt.Frame(); 

   default: // error
}
} catch(Exception e) {throw new JschemeThrowable(e);}; 
 return tmp;
}

static Object _J14/* java.awt.Frame. */ = new SNLP( JAVA_LIT, 14/* java.awt.Frame.*/, Pair.EMPTY);


    //static { new SNLP().init();}
    }
